// em data/prettier.data.ts

import type { CodeSnippet } from "@/@types";

export const prettierData: CodeSnippet[] = [
  {
    id: "prettier-installation",
    title: "1. Instalação das Dependências",
    description:
      "Instale o Prettier, o plugin para ordenação automática de classes do Tailwind CSS e a configuração que o integra com o ESLint (caso não tenha instalado na etapa do ESLint).",
    language: "bash",
    code: `pnpm install -D prettier prettier-plugin-tailwindcss eslint-config-prettier`,
  },
  {
    id: "prettierrc-config",
    title: "2. Arquivo de Configuração (`.prettierrc.json`)",
    description:
      "Este arquivo centraliza as opções de formatação do Prettier. As opções abaixo são um ponto de partida popular e opinativo. O plugin do Tailwind é ativado aqui.",
    language: "json",
    code: `{
  "semi": true,
  "singleQuote": true,
  "jsxSingleQuote": false,
  "trailingComma": "all",
  "arrowParens": "always",
  "printWidth": 80,
  "tabWidth": 2,
  "plugins": ["prettier-plugin-tailwindcss"]
}`,
  },
  {
    id: "prettier-ignore",
    title: "3. Arquivo de Ignore (`.prettierignore`)",
    description:
      "Similar ao `.eslintignore`, este arquivo diz ao Prettier quais arquivos e pastas ele não deve formatar. É útil para evitar a formatação de arquivos gerados, dependências e lockfiles.",
    language: "bash",
    code: `# Ignore artifacts
.next/
node_modules/
dist/
out/
public/

# Ignore lockfiles
pnpm-lock.yaml
package-lock.json
yarn.lock

# Ignore configs generated by tools
*.config.js
*.config.mjs
`,
  },
  {
    id: "package-json-scripts-prettier",
    title: "4. Scripts no `package.json`",
    description:
      "Adicione scripts para verificar a formatação (útil em CI/CD) e para aplicar a formatação em todos os arquivos do projeto de uma só vez.",
    language: "json",
    code: `"scripts": {
  "dev": "next dev",
  "build": "next build",
  "start": "next start",
  "lint": "eslint . --ext .ts,.tsx",
  "lint:fix": "eslint . --ext .ts,.tsx --fix",
  "format:check": "prettier --check .",
  "format:fix": "prettier --write ."
}`,
  },
  {
    id: "vscode-integration-prettier",
    title: "5. (Opcional) Integração com VS Code",
    description:
      "Esta é a etapa mais importante para a experiência do desenvolvedor. Configure o VS Code para formatar o código automaticamente ao salvar. Crie o arquivo `.vscode/settings.json` e instale a extensão 'Prettier - Code formatter'.",
    language: "json",
    code: `{
  // --- Configurações do ESLint (da etapa anterior) ---
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit"
  },
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact"
  ],

  // --- Configurações do Prettier ---
  // Define o Prettier como formatador padrão para todos os arquivos suportados
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  // Ativa a formatação automática ao salvar o arquivo
  "editor.formatOnSave": true,
  // Formata o código ao colar (opcional, mas recomendado)
  "editor.formatOnPaste": true
}`,
  },
];